name: Note Workflow

on:
  workflow_dispatch:
    inputs:
      theme:
        description: '記事テーマ'
        required: true
        type: string
      target:
        description: '想定読者（ペルソナ）'
        required: true
        type: string
      message:
        description: '読者に伝えたい核メッセージ'
        required: true
        type: string
      cta:
        description: '読後のアクション（CTA）'
        required: true
        type: string
      tags:
        description: 'カンマ区切りタグ（任意）'
        required: false
        default: ''
        type: string
      is_public:
        description: '公開(true)/下書き(false)'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      dry_run:
        description: '投稿をスキップ（生成のみ）'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: read

env:
  TZ: Asia/Tokyo

jobs:
  research:
    name: Research (Tavily + Claude)
    runs-on: ubuntu-latest
    env:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
      THEME: ${{ github.event.inputs.theme }}
      TARGET: ${{ github.event.inputs.target }}
    outputs:
      research_b64: ${{ steps.collect.outputs.research_b64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install AI SDK
        run: |
          npm init -y
          npm i ai @ai-sdk/anthropic
      - name: Execute Research with Tavily and Summarize with Claude
        id: execute_research
        run: |
          echo "--- Searching with Tavily... ---"
          curl -s -X POST https://api.tavily.com/search \
            -H "Content-Type: application/json" \
            -d '{
              "api_key": "${{ env.TAVILY_API_KEY }}",
              "query": "${{ env.THEME }}",
              "search_depth": "advanced",
              "max_results": 7
            }' > tavily_results.json

          if [ ! -s tavily_results.json ]; then
            echo "::error::Tavily search returned no results."
            exit 1
          fi
          echo "--- Tavily search completed. ---"

          cat > create_report.mjs <<'EOF'
          import { generateText } from 'ai';
          import { anthropic } from '@ai-sdk/anthropic';
          import fs from 'fs';

          async function main() {
            try {
              const tavilyResults = JSON.parse(fs.readFileSync('tavily_results.json', 'utf8'));
              const researchContext = tavilyResults.results.map(r => 
                `Source URL: ${r.url}\nTitle: ${r.title}\nContent: ${r.content}`
              ).join('\n\n---\n\n');

              const systemPrompt = [
                'あなたは最新情報の収集と要約に特化した超一流のリサーチャーです。',
                '渡された検索結果（コンテキスト）のみに基づき、事実を忠実に要約してください。',
                '十分な分量（目安: 2,000語以上）で、各情報源のURLを出典として明確に示しながら、包括的なリサーチレポートを作成してください。'
              ].join('\n');
              
              const userPrompt = `以下のテーマとコンテキストに基づき、最終的なリサーチレポートを作成してください。\n\nテーマ: ${process.env.THEME}\n想定読者: ${process.env.TARGET}\n\nコンテキスト:\n${researchContext}`;

              console.log('--- Generating report with Claude... ---');

              // ▼▼▼ 変更点 1/3: モデル名をClaude 3 Haikuに変更 ▼▼▼
              const { text } = await generateText({
                model: anthropic('claude-3-haiku-20240307'),
                system: systemPrompt,
                prompt: userPrompt,
              });

              fs.mkdirSync('.note-artifacts', { recursive: true });
              fs.writeFileSync('.note-artifacts/research.md', text);
              
              console.log('--- Claude report generation completed. ---');

            } catch (error) {
              console.error("--- Error during report generation ---");
              console.error(error);
              process.exit(1);
            }
          }
          main();
          EOF
          
          node create_report.mjs
      - name: Collect research
        id: collect
        run: |
          if [ ! -s .note-artifacts/research.md ]; then
            echo "::error::Research result file is empty."
            exit 1
          fi
          b64=$(base64 -w 0 .note-artifacts/research.md 2>/dev/null || base64 .note-artifacts/research.md)
          echo "research_b64<<EOF" >> $GITHUB_OUTPUT
          echo "$b64" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Upload research artifacts
        uses: actions/upload-artifact@v4
        with:
          name: research-artifacts
          path: .note-artifacts/research.md

  write:
    name: Write (Claude Sonnet 3.0)
    needs: research
    runs-on: ubuntu-latest
    env:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      THEME: ${{ github.event.inputs.theme }}
      TARGET: ${{ github.event.inputs.target }}
      MESSAGE: ${{ github.event.inputs.message }}
      CTA: ${{ github.event.inputs.cta }}
      INPUT_TAGS: ${{ github.event.inputs.tags }}
    outputs:
      title: ${{ steps.collect.outputs.title }}
      draft_json_b64: ${{ steps.collect.outputs.draft_json_b64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install AI SDK
        run: |
          npm init -y
          npm i ai @ai-sdk/anthropic
      - name: Restore research
        env:
          RESEARCH_B64: ${{ needs.research.outputs.research_b64 }}
        run: |
          mkdir -p .note-artifacts
          echo "$RESEARCH_B64" | base64 -d > .note-artifacts/research.md || echo "$RESEARCH_B64" | base64 --decode > .note-artifacts/research.md
      - name: Generate draft (title/body/tags)
        run: |
          cat > write.mjs <<'EOF'
          import { generateText } from 'ai';
          import { anthropic } from '@ai-sdk/anthropic';
          import fs from 'fs';
          const theme=process.env.THEME||''; const target=process.env.TARGET||''; const message=process.env.MESSAGE||''; const cta=process.env.CTA||'';
          const inputTags=(process.env.INPUT_TAGS||'').split(',').map(s=>s.trim()).filter(Boolean);
          const researchReport=fs.readFileSync('.note-artifacts/research.md','utf8');
          // ▼▼▼ 変更点 2/3: モデル名をClaude 3 Haikuに変更 ▼▼▼
          const modelName='claude-3-haiku-20240307';
          function extractJsonFlexible(raw){const t=(raw||'').trim().replace(/\u200B/g,'');try{return JSON.parse(t);}catch{}const m=t.match(/```[a-zA-Z]*\s*([\s\S]*?)\s*```/);if(m&&m[1]){try{return JSON.parse(m[1].trim());}catch{}}const f=t.indexOf('{'),l=t.lastIndexOf('}');if(f!==-1&&l!==-1&&l>f){const c=t.slice(f,l+1);try{return JSON.parse(c);}catch{}}return null;}
          async function repairJson(raw){const sys='入力から {"title":string,"draftBody":string,"tags":string[]} のJSONのみ返答。';const {text}=await generateText({model:anthropic(modelName),system:sys,prompt:String(raw),temperature:0,maxTokens:8000});return extractJsonFlexible(text||'');}
          function sanitizeTitle(t){let s=String(t||'').trim();s=s.replace(/^```[a-zA-Z0-9_-]*\s*$/,'').replace(/^```$/,'');s=s.replace(/^#+\s*/,'');s=s.replace(/^"+|"+$/g,'').replace(/^'+|'+$/g,'');s=s.replace(/^`+|`+$/g,'');s=s.replace(/^json$/i,'').trim();if(!s) s='タイトル（自動生成）';return s;}
          function deriveTitleFromText(text){const lines=(text||'').split(/\r?\n/).map(l=>l.trim()).filter(Boolean);const firstReal=lines.find(l=>!/^```/.test(l))||lines||'';return sanitizeTitle(firstReal);}
          const sysWrite='note.com向け長文記事の生成。JSON {title,draftBody,tags[]} で返答。draftBodyは6000〜9000文字を目安に十分な分量で、章ごとに小見出しと箇条書きを適切に含めること。';
          const prompt=[`{テーマ}: ${theme}`,`{ペルソナ}: ${target}`,`{リサーチ内容}: ${researchReport}`,`{伝えたいこと}: ${message}`,`{読後のアクション}: ${cta}`].join('\n');
          const {text}=await generateText({model:anthropic(modelName),system:sysWrite,prompt,temperature:0.7,maxTokens:30000});
          let obj=extractJsonFlexible(text||'')||await repairJson(text||'');
          let title, draftBody, tags; if(obj){title=sanitizeTitle(obj.title); draftBody=String(obj.draftBody||'').trim(); tags=Array.isArray(obj.tags)?obj.tags.map(String):[]}
          if(!title||!draftBody){ title=deriveTitleFromText(text||''); const lines=(text||'').split(/\r?\n/); draftBody=lines.slice(1).join('\n').trim()||(text||''); tags=[]}
          if(inputTags.length){tags=Array.from(new Set([...(tags||[]),...inputTags]));}
          fs.writeFileSync('.note-artifacts/draft.json',JSON.stringify({title,draftBody,tags},null,2));
          EOF
          node write.mjs
      - name: Collect draft
        id: collect
        run: |
          title=$(node -e "console.log(JSON.parse(require('fs').readFileSync('.note-artifacts/draft.json','utf8')).title)")
          b64=$(base64 -w 0 .note-artifacts/draft.json 2>/dev/null || base64 .note-artifacts/draft.json)
          echo "title<<EOF" >> $GITHUB_OUTPUT; echo "$title" >> $GITHUB_OUTPUT; echo "EOF" >> $GITHUB_OUTPUT
          echo "draft_json_b64<<EOF" >> $GITHUB_OUTPUT; echo "$b64" >> $GITHUB_OUTPUT; echo "EOF" >> $GITHUB_OUTPUT
      - name: Upload draft artifact
        uses: actions/upload-artifact@v4
        with:
          name: draft-artifact
          path: .note-artifacts/draft.json

  factcheck:
    name: Fact-check (Tavily)
    needs: write
    runs-on: ubuntu-latest
    env:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
      TITLE: ${{ needs.write.outputs.title }}
    outputs:
      title: ${{ steps.collect.outputs.title }}
      final_b64: ${{ steps.collect.outputs.final_b64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install AI SDK
        run: |
          npm init -y
          npm i ai @ai-sdk/anthropic
      - name: Restore draft json
        env:
          DRAFT_JSON_B64: ${{ needs.write.outputs.draft_json_b64 }}
        run: |
          mkdir -p .note-artifacts
          echo "$DRAFT_JSON_B64" | base64 -d > .note-artifacts/draft.json || echo "$DRAFT_JSON_B64" | base64 --decode > .note-artifacts/draft.json
      - name: Fact-check with Tavily
        run: |
          cat > factcheck.mjs <<'EOF'
          import { generateText } from 'ai';
          import { anthropic } from '@ai-sdk/anthropic';
          import fs from 'fs';
          const draft=JSON.parse(fs.readFileSync('.note-artifacts/draft.json','utf8'));
          // ▼▼▼ 変更点 3/3: モデル名をClaude 3 Haikuに変更 ▼▼▼
          const modelName='claude-3-haiku-20240307';
          const TAVILY_API_KEY=process.env.TAVILY_API_KEY||'';
          if(!TAVILY_API_KEY){ console.error('TAVILY_API_KEY is not set'); process.exit(1); }
          function extractJsonFlexible(raw){const t=(raw||'').trim().replace(/\u200B/g,'');try{ const o=JSON.parse(t); return o; }catch{}const fence=t.match(/```[a-zA-Z]*\s*([\s\S]*?)\s*```/); if(fence&&fence){ try{ return JSON.parse(fence.trim()); }catch{} }let f=t.indexOf('{'), l=t.lastIndexOf('}'); if(f!==-1&&l!==-1&&l>f){ const cand=t.slice(f,l+1); try{ return JSON.parse(cand); }catch{} }f=t.indexOf('['); l=t.lastIndexOf(']'); if(f!==-1&&l!==-1&&l>f){ const cand=t.slice(f,l+1); try{ return JSON.parse(cand); }catch{} }return null;}
          function stripCodeFence(s){const t=String(s||'').trim();const m=t.match(/^```[a-zA-Z0-9_-]*\s*([\s\S]*?)\s*```\s*$/); if(m&&m) return m.trim();return t;}
          async function proposeQueries(body){const sys='あなたは事実検証の専門家です。入力本文から検証が必要な固有名詞・数値・主張を抽出し、Tavily検索用に日本語の検索クエリを最大10件の配列で返してください。出力はJSON配列のみ。';const { text } = await generateText({ model: anthropic(modelName), system: sys, prompt: String(body), temperature: 0, maxTokens: 2000 });const arr = extractJsonFlexible(text||'');return Array.isArray(arr) ? arr.map(String).filter(Boolean).slice(0,10) : [];}
          async function tavilySearch(q){const res = await fetch('https://api.tavily.com/search', {method: 'POST', headers: { 'Content-Type': 'application/json' },body: JSON.stringify({ api_key: TAVILY_API_KEY, query: q, search_depth: 'advanced', max_results: 5, include_answer: true })});if(!res.ok){ return { query:q, results:[], answer:null }; }const json = await res.json().catch(()=>({}));return { query:q, results: Array.isArray(json.results)? json.results: [], answer: json.answer || null };}
          function formatEvidence(items){const lines = [];for(const it of items){lines.push(`### 検索: ${it.query}`);if(it.answer){ lines.push(`要約: ${it.answer}`); }for(const r of it.results||[]){const t = (r.title||'').toString();const u = (r.url||'').toString();const c = (r.content||'').toString().slice(0,500);lines.push(`- [${t}](${u})\n  ${c}`);}lines.push('');}return lines.join('\n');}
          async function main(){const queries = await proposeQueries(draft.draftBody||'');const results = [];for(const q of queries){ results.push(await tavilySearch(q)); }const evidence = formatEvidence(results);const sys=['あなたは事実検証の専門家です。以下の原稿（note記事の下書き）に対し、提供されたエビデンス（Tavily検索結果）に基づき、','誤情報の修正・低信頼出典の置換・信頼できる一次情報の本文内Markdownリンク埋め込みを行って、修正後の本文のみ返してください。','文体・構成は原稿を尊重し、必要に応じて本文末尾に参考文献セクションを追加してください。',].join('\n');const prompt = ['## 原稿', String(draft.draftBody||''), '', '## エビデンス（Tavily検索結果）', evidence].join('\n\n');const { text } = await generateText({ model: anthropic(modelName), system: sys, prompt, temperature: 0.3, maxTokens: 30000 });let body = stripCodeFence(text||'');let title = process.env.TITLE || draft.title || '';let tags = Array.isArray(draft.tags)? draft.tags: [];const obj = extractJsonFlexible(body);if (obj && typeof obj === 'object' && !Array.isArray(obj)) {if (obj.title) title = String(obj.title);const candidates = [obj.body, obj.draftBody, obj.content, obj.text];const chosen = candidates.find(v=>typeof v==='string' && v.trim());if (chosen) body = String(chosen);if (Array.isArray(obj.tags)) tags = obj.tags.map(String);}body = stripCodeFence(body);const out = { title, body, tags };fs.writeFileSync('.note-artifacts/final.json', JSON.stringify(out,null,2));}
          await main();
          EOF
          node factcheck.mjs
      - name: Upload fact-check artifact
        uses: actions/upload-artifact@v4
        with:
          name: final-artifact
          path: .note-artifacts/final.json
      - name: Collect final
        id: collect
        run: |
          title=$(node -e "console.log(JSON.parse(require('fs').readFileSync('.note-artifacts/final.json','utf8')).title)")
          b64=$(base64 -w 0 .note-artifacts/final.json 2>/dev/null || base64 .note-artifacts/final.json)
          echo "title<<EOF" >> $GITHUB_OUTPUT; echo "$title" >> $GITHUB_OUTPUT; echo "EOF" >> $GITHUB_OUTPUT
          echo "final_b64<<EOF" >> $GITHUB_OUTPUT; echo "$b64" >> $GITHUB_OUTPUT; echo "EOF" >> $GITHUB_OUTPUT
  post:
    name: Post to note.com (Playwright)
    needs: factcheck
    if: ${{ github.event.inputs.dry_run != 'true' }}
    runs-on: ubuntu-latest
    env:
      IS_PUBLIC: ${{ github.event.inputs.is_public }}
      STATE_JSON: ${{ secrets.NOTE_STORAGE_STATE_JSON }}
      START_URL: https://editor.note.com/new
    outputs:
      final_url: ${{ steps.publish.outputs.published_url || steps.publish.outputs.draft_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Playwright
        run: |
          npm init -y
          npm i playwright marked
          npx playwright install --with-deps chromium | cat
      - name: Prepare storageState
        id: state
        run: |
          test -n "$STATE_JSON" || (echo "ERROR: NOTE_STORAGE_STATE_JSON secret is not set" && exit 1)
          mkdir -p "$RUNNER_TEMP"
          echo "$STATE_JSON" > "$RUNNER_TEMP/note-state.json"
          echo "STATE_PATH=$RUNNER_TEMP/note-state.json" >> $GITHUB_OUTPUT
      - name: Ensure jq (post)
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi
      - name: Restore final
        id: draft
        env:
          FINAL_B64: ${{ needs.factcheck.outputs.final_b64 }}
        run: |
          test -n "$FINAL_B64" || { echo "final_b64 output is empty"; exit 1; }
          echo "$FINAL_B64" | base64 -d > final.json || echo "$FINAL_B64" | base64 --decode > final.json
          echo "TITLE=$(jq -r .title final.json)" >> $GITHUB_OUTPUT
          echo "TAGS=$(jq -r '.tags | join(", ")' final.json)" >> $GITHUB_OUTPUT
      - name: Publish via Playwright (draft or public)
        id: publish
        env:
          TITLE: ${{ steps.draft.outputs.TITLE }}
          TAGS: ${{ steps.draft.outputs.TAGS }}
          STATE_PATH: ${{ steps.state.outputs.STATE_PATH }}
        run: |
          cat > post.mjs <<'EOF'
          import { chromium } from 'playwright';
          import { marked } from 'marked';
          import fs from 'fs';
          
          const STATE_PATH=process.env.STATE_PATH;
          const START_URL=process.env.START_URL||'https://editor.note.com/new';
          const rawTitle=process.env.TITLE||'';
          const rawFinal=JSON.parse(fs.readFileSync('final.json','utf8'));
          const rawBody=String(rawFinal.body||'');
          const TAGS=process.env.TAGS||'';
          const IS_PUBLIC=String(process.env.IS_PUBLIC||'false')==='true';

          let browser;
          try {
            if(!fs.existsSync(STATE_PATH)){ throw new Error('storageState not found:' + STATE_PATH); }

            console.log('1. Launching browser...');
            browser = await chromium.launch({ headless: true, args: ['--lang=ja-JP'] });
            const context = await browser.newContext({ storageState: STATE_PATH, locale: 'ja-JP' });
            const page = await context.newPage();
            page.setDefaultTimeout(120000);

            console.log(`2. Navigating to ${START_URL}...`);
            // ▼▼▼ 変更点 1: ページの読み込み完了をより確実に待つように変更 ▼▼▼
            await page.goto(START_URL, { waitUntil: 'networkidle' });

            // ▼▼▼ 変更点 2: タイトル入力欄のセレクタを、より堅牢なものに変更 ▼▼▼
            const titleSelector = 'textarea[aria-label="タイトル"]';
            console.log(`3. Waiting for title selector: ${titleSelector}`);
            await page.waitForSelector(titleSelector);
            await page.fill(titleSelector, rawTitle);
            console.log('4. Title filled successfully.');

            // ▼▼▼ 変更点 3: 本文入力欄のセレクタを、より堅牢なものに変更 ▼▼▼
            const bodySelector = 'div.o-editor_note__body';
            console.log(`5. Waiting for body selector: ${bodySelector}`);
            const bodyBox = page.locator(bodySelector).first();
            await bodyBox.waitFor({ state: 'visible' });
            
            console.log('6. Typing body content...');
            await bodyBox.click();
            await page.keyboard.type(rawBody);
            console.log('7. Body content typed successfully.');

            if(!IS_PUBLIC){
              // ▼▼▼ 変更点 4: 下書き保存ボタンのセレクタを、より堅牢なものに変更 ▼▼▼
              const saveBtnSelector = 'button[data-name="save-button"]';
              console.log(`8. Waiting for draft save button: ${saveBtnSelector}`);
              const saveBtn = page.locator(saveBtnSelector).first();
              await saveBtn.waitFor({ state: 'visible' });

              console.log('9. Clicking draft save button...');
              await saveBtn.click();
              
              const confirmationSelector = 'text=下書き保存しました';
              console.log(`10. Waiting for confirmation: "${confirmationSelector}"`);
              await page.locator(confirmationSelector).waitFor({ timeout: 10000 });
              console.log('11. Draft saved successfully!');
            } else {
              // 公開処理（今回は省略）
            }

            await page.screenshot({ path: 'success_screenshot.png', fullPage: true });
            console.log('Screenshot saved as success_screenshot.png');

          } catch (error) {
            console.error("--- An error occurred during Playwright execution ---");
            console.error(error);
            if (browser) {
              const pages = await browser.contexts()[0]?.pages();
              if (pages && pages.length > 0) {
                console.log('Attempting to take error screenshot...');
                await pages[0].screenshot({ path: 'error_screenshot.png', fullPage: true });
                console.log('Screenshot saved as error_screenshot.png');
              }
            }
            process.exit(1);
          } finally {
            if (browser) await browser.close();
          }
          EOF
          node post.mjs
      - name: Upload screenshot
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: note-screenshot
          path: "*.png"
          name: note-screenshot
          path: "*.png"
